package No10_SocketProgramm

/*
	网络协议:
		指网络中数据传输和数据解释的规则
		原始协议:
			指仅仅在一小部分人之间被遵守的协议
		标准协议:
			指原始协议被更多的人采用, 不断增加、改进、维护、完善, 最终形成的一个稳定, 完整的文件传输协议, 被广泛应用于
			各种文件传输中; 最早的ftp协议就是由此衍生的
	网络分层架构:
		为了减少协议设计的复杂性, 大多数网络采用分层的方式来组织, 每一层都有自己的功能, 每一层利用下一层提供的服务
		来为上一层提供服务, 本层服务的实现细节对上层屏蔽
		OSI/RM(理论上的标准):
			从上到下: 应用层-表示层-会话层-传输层-网络层-数据链路层-物理层
		TCP/IP(事实上的标准):
			从上到下: 应用层(对应理论层的: 应用层-表示层-会话层)-传输层-网络层-链路层(对应理论层的: 数据链路层-物理层)
		越下面的层, 越靠近硬件, 越上面的层, 越靠近用户
		各层功能:
			1. 链路层:
				通过网卡地址-MAC地址使得不同的计算机之间链接, 从而完成数据通信等功能, MAC地址:就是数据包的物理发送地址
				和物理接收地址
			2. 网络层:
				该层的作用是引进一套新的地址, 使得我们能够区分不同的计算机是否属于同一个子网络, 这套地址叫做网络地址,
				也是平时说的IP地址, 网络地址确定了计机所在的子网络, MAC地址将数据包传送到子网络中的目标网卡, 网络层协议包含的
				主要信息是源IP和目的IP
			3. 传输层:
				引入端口号, 相当于网络程序的一个编号, 包含源端口和目的端口, 确保由网络设备上的哪一个网络程序来发送和接收数据
				端口特点:
					3.1 对于同一个端口, 在不同系统中对应着不同进程
					3.2 对于同一个系统, 一个端口只能被一个进程拥有
			4. 应用层:
				规定应用程序的数据格式
	常见的软件架构:
		1. C/S ==> Client/Server ==> 客户端/服务器
			在用户本地需要下载客户端程序, 在远程有一个服务器程序, 用户通过客户端访问服务器
			优点: 画面可以做的非常精美, 用户体验好
			缺点: 需要同时开发客户端和服务端, 开发部署和维护非常麻烦, 并且当服务端更新后, 客户端要同步更新
		2. B/S ==> Browser/Server ==> 浏览器/服务器
			只需要一个浏览器, 用户通过不同的网址, 可以访问不同的服务器, 用户通过浏览器访问服务器
			优点: 不需要客户端, 只需要 前端页面 + 服务端 就可以访问, 开发部署和维护简单
			缺点: 如果应用过大, 会影响用户体验
	网络通信三要素:
        1. ip地址:
            全称 ==> Internet Protocol, 是互联网协议地址, 也称IP地址, 是分配给上网设备的数字标签, 是唯一的
			IPV4:
				全称 ==> Internet Protocol Version 4, 互联网通信协议第4版
				采用32位地址长度, 分成4组, 每组8个比特位, 共有 2^32 个IP
				特殊IP地址:
					127.0.0.1 / localhost: 是回送地址也称作本地回环地址, 也称作本机IP
				常用的CMD命令:
					1. ipconfig: 查看本机IP地址
					2. ping ip: 检查与目标ip网络是否连通
			IPV6:
				全称 ==> Internet Protocol Version 6, 互联网通信协议第6版
				采用128位地址长度, 分成8组, 每组16个比特位, 共有 2^128 个IP
            查看ip地址:
                Linux和mac os: ifconfig 命令
                windows os: ipconfig 命令
            测试网络是否畅通 ==> ping 命令:
                ping ip地址(域名)
                ping本机 ==> ping 127.0.0.1 或 ping localhost 或 ping 本机ip
        2. 端口:
            应用程序在设备中的唯一标识
            每运行一个网络程序都会有一个端口, 想要给对应的程序发送数据, 需要找到对应的端口, 每个端口
            都有一个对应的端口号, 通过端口号可以找到端口
			端口号有65536个, 是一个数字, 从 0-65535, 只有网络程序才有端口号
			端口号分类:
				1. 周知端口: 0-1023, 被预先定义的知名应用占用(如: HTTP占用80, FTP占用21)
				2. 注册端口: 1024- 49151, 分配给用户进程或某些应用程序
							(如: Tomcat占用8080, MySql占用3306)
				3. 动态端口: 49152-65535, 一般不固定分配某种进程, 而是动态分配
				注意: 我们自己开发的程序选择注册端口, 且一个设备中不能出现两个程序的端口号一样,
					  否则会出错
            端口复用:
                用于服务端, 让程序退出时立即释放端口号
        3. 通信协议:
            数据在网络中传输的规则, 常见的有UDP、TCP、http、Https、ftp等
	Socket编程:
		Socket是BSD UNIX的进程通信机制, 通常也称作 "套接字", 用于描述 IP地址和端口, 是一个通信链放入句柄, Socket也可以理解为 TCP/IP
		网络的API, 定义了许多函数或例程, 程序员可以用它们来开发 TCP/IP 网络上的应用程序; 电脑上的应用程序通常通过 "套接字" 向网络发出请求
		或应答网络请求
		常用的Socket类型:
			1. 流式Socket: 是一种面向连接的Socket, 针对于面向连接的TCP服务应用
				特点: 比较靠谱, 面向连接, 比较慢
			2. 数据报式Socket: 是一种无连接的Socket,针对于无连接的 UDP 服务应用
				特点: 不是太靠谱, 比较快
		net包 ==> 提供了可移植的网络I/O接口, 包括TCP/IP, UDP, 域名解析和Unix域Socket
*/
